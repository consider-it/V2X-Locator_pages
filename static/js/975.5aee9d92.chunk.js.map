{"version":3,"file":"static/js/975.5aee9d92.chunk.js","mappings":"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","sources":["types/CoreWorker.ts","types/GeojsonSource.ts","services/MqttClient.ts","services/coreWorker.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import { WasmCoreSettings } from \"@consider-it/v2x-wasm-core\";\r\nimport { GeojsonSource } from \"./GeojsonSource\";\r\n\r\n\r\n/**\r\n * ObuInfo\r\n * @typedef {Object} ObuInfo\r\n * @description Describes the state of a connected on-board unit (OBU)\r\n * @property {number} lat - latitude of the OBU position in degrees WGS84\r\n * @property {number} lon - longitude of the OBU position in degrees WGS84\r\n * @property {number} heading - heading of the OBU in degrees from zero north\r\n * @property {number} kphSpeed - speed of the OBU in km per hour\r\n * @property {number} time - last timestamp of the OBU's system clock\r\n */\r\nexport type ObuInfo = {\r\n  lat: number;\r\n  lon: number;\r\n  heading: number;\r\n  kphSpeed: number;\r\n  time: number;\r\n};\r\n\r\n/**\r\n * @var MovementPhaseState\r\n * @enum {number}\r\n * @description Representation of the movement phase state of a traffic light according to CEN ISO/TS 19091-2018.\r\n */\r\nexport enum MovementPhaseState {\r\n  /** \r\n   * @member UNAVAILABLE\r\n   */\r\n  UNAVAILABLE = 0,\r\n  /** \r\n   * @member DARK\r\n   * @description The respective signal is dark\r\n   */\r\n  DARK = 1,\r\n  /** \r\n   * @member STOP_THEN_PROCEED\r\n   * @description The respective signal is red\r\n   */\r\n  STOP_THEN_PROCEED = 2,\r\n  /** \r\n   * @member STOP_AND_REMAIN\r\n   * @description The respective signal is red\r\n   */\r\n  STOP_AND_REMAIN = 3,\r\n  /** \r\n   * @member PRE_MOVEMENT\r\n   * @description The respective signal is red-yellow\r\n   */\r\n  PRE_MOVEMENT = 4,\r\n  /** \r\n   * @member PERMISSIVE_MOVEMENT_ALLOWED\r\n   * @description The respective signal is green\r\n   */\r\n  PERMISSIVE_MOVEMENT_ALLOWED = 5,\r\n  /** \r\n   * @member PROTECTED_MOVEMENT_ALLOWED\r\n   * @description The respective signal is green\r\n   */\r\n  PROTECTED_MOVEMENT_ALLOWED = 6,\r\n  /** \r\n   * @member PERMISSIVE_CLEARANCE\r\n   * @description The respective signal is yellow\r\n   */\r\n  PERMISSIVE_CLEARANCE = 7,\r\n  /** \r\n   * @member PROTECTED_CLEARANCE\r\n   * @description The respective signal is yellow\r\n   */\r\n  PROTECTED_CLEARANCE = 8,\r\n  /** \r\n   * @member CAUTION_CONFLICTING_TRAFFIC\r\n   * @description The respective signal is flashing yellow\r\n   */\r\n  CAUTION_CONFLICTING_TRAFFIC = 9,\r\n}\r\n\r\n/**\r\n * @var Maneuver\r\n * @enum {number}\r\n * @description Simplified description of a traffic light signal's \"direction\", i.e. what kind of symbol the signal displays.\r\n */\r\nexport enum Maneuver {\r\n  /** \r\n   * @member OMNI\r\n   * @description The signal displays a fully-lit, round \"omni\" symbol\r\n   */\r\n  OMNI,\r\n  /** \r\n   * @member LEFT\r\n   * @description The signal displays an arrow symbol pointing left\r\n   */\r\n  LEFT,\r\n  /** \r\n   * @member RIGHT\r\n   * @description The signal displays an arrow symbol pointing right\r\n   */\r\n  RIGHT,\r\n  /** \r\n   * @member STRAIGHT\r\n   * @description The signal displays an arrow symbol pointing up\r\n   */\r\n  STRAIGHT,\r\n  /** \r\n   * @member MISC\r\n   * @description Fallback option in case the maneuver is not known\r\n   */\r\n  MISC,\r\n}\r\n\r\n/**\r\n * TlSpat\r\n * @typedef {Object} TlSpat\r\n * @description Describes the state of a traffic light signal. Usually received as part of SPaT messages.\r\n * @property {Maneuver} direction - simplified description of a traffic light signal's \"direction\", i.e. what kind of symbol the signal displays.\r\n * @property {MovementPhaseState} phase - representation of the movement phase state of a traffic light according to CEN ISO/TS 19091-2018\r\n * @property {number} remainingSec - remaining seconds until the next signal switch event\r\n * @property {number} advisedSpeedKph - appropriate speed in kilometers per hour with respect to the signal switch times of the traffic light that the OBU is approaching\r\n */\r\nexport type TlSpat = {\r\n  direction: Maneuver;\r\n  phase: MovementPhaseState;\r\n  remainingSec: number | undefined;\r\n  advisedSpeedKph: number | undefined;\r\n};\r\n\r\nexport enum WorkerRequestType {\r\n  INIT = \"init\",\r\n  LATEST_MESSAGE = \"latest-message\",\r\n  UPDATE_SETTINGS = \"update-settings\"\r\n}\r\n\r\nexport enum WorkerResponseType {\r\n  OBU_INFO = \"on-obu-info\",\r\n  GEOJSON = \"on-geojson\",\r\n  ERROR = \"error\",\r\n  CONNECTED = \"on-connect\",\r\n  GLOSA = \"glosa\",\r\n  RAW_MSG = \"raw-message\",\r\n  MATCHED_LANE_PHASES = \"matched-lane-phases\",\r\n  LOOPBACK = \"loopback\"\r\n}\r\n\r\nexport interface WorkerResponse {\r\n  type: WorkerResponseType;\r\n  obuInfo?: ObuInfo;\r\n  json?: string;\r\n  src?: GeojsonSource;\r\n  error?: Error;\r\n  glosa?: TlSpat[];\r\n  rawMsg?: string;\r\n  greenLaneUuids?: string;\r\n  yellowLaneUuids?: string;\r\n  redLaneUuids?: string;\r\n  darkLaneUuids?: string;\r\n}\r\n\r\n\r\nexport interface WorkerRequest {\r\n  type: WorkerRequestType;\r\n  settings?: CoreSettings;\r\n  obuInfo?: ObuInfo;\r\n  stationId?: number;\r\n  secondaryId?: number;\r\n  messageType?: SubscribedEtsiMsg;\r\n}\r\n\r\nexport enum SubscribedEtsiMsg {\r\n  DENM = 1,\r\n  CAM = 2,\r\n  SPATEM = 4,\r\n  IVIM = 8,\r\n  MAPEM = 5,\r\n  CPM = 14,\r\n}\r\n\r\n/**\r\n * CoreSettings\r\n * @typedef {Object} CoreSettings\r\n * @description Composite settings object defining the configuration of MQTT client, Core worker thread, and the WASM core library\r\n * @param {string} brokerUrl URL of the MQTT broker to subscribe to. Should include protocol prefix and port number. E.g. `tcp://test.mosquitto.org:1883`\r\n * @param {boolean} usesRateReducedTopics whether the MQTT broker should subscribe to the rate-reduced variants of the v2x/rx topics instead of the standard ones\r\n * @param {number} glosaFrequencyMs frequency at which GLOSA information shall be queried from WASM core\r\n * @param {number} spatemMaxFreqMs maximum frequency of SPATEM updates. Incoming SPATEM messages within the time frame defined using spatemMaxFreqMs will be ignored\r\n * @param {boolean} usesV2xRxWrapper whether the application should expect the incoming MQTT messages to contain a wrapper according to the consider it V2X RX protocol\r\n * @param {number} laneCorridorWidthM the width of the corridor computed from a MAPEM's approach (used in WASM core's GLOSA algorithm)\r\n * @param {number} featureLifetimeMs the default lifetime of a GeoJSON feature in the WASM core cache. E.g. with a featureLifetimeMs value of 2000, a representation of an incoming CAM-message will be displayed for 2 seconds on the map\r\n * @param {number} camMaxFreqMs maximum frequency of CAM updates. Incoming CAM messages within the time frame defined using spatemMaxFreqMs will be ignored\r\n * @param {number} approachHeadingTolerance heading tolerance in degrees of the GLOSA algorithm when determining the current approach. The GLOSA algorithm selects the closest approach to the OBU's current position that is within a heading range of the OBU\r\n * @param {boolean} usingMatchedLanes whether MAPEM lane geometries should be matched to the coordinates of the corresponding lanes in the OpenStreetMap data set. Matching allows fitting the lane phases into the rendered lanes on the map.\r\n * @param {boolean} userFriendlyGlosa whether GLOSA information should be processed to remove duplicate icons and confusing timing information\r\n * @param {boolean} debugGlosa whether intersection areas and lane corridors used by the GLOSA algorithm should be displayed on the map\r\n * @param {boolean} showObuPathHistory whether the path history of the OBU should be drawn to the map\r\n * @param {boolean} showConsoleDebug whether the logging output of the core library should be logged to the browser console\r\n */\r\nexport type CoreSettings = {\r\n  brokerUrl: string,\r\n  usesRateReducedTopics: boolean,\r\n  glosaFrequencyMs: number,\r\n  spatemMaxFreqMs: number,\r\n  usesV2xRxWrapper: boolean,\r\n  laneCorridorWidthM: number,\r\n  featureLifetimeMs: number,\r\n  camMaxFreqMs: number,\r\n  approachHeadingTolerance: number,\r\n  usingMatchedLanes: boolean,\r\n  userFriendlyGlosa: boolean,\r\n  debugGlosa: boolean,\r\n  showObuPathHistory: boolean,\r\n  showConsoleDebug: boolean,\r\n};\r\n\r\n/**\r\n * @description extracts a WASM core configuration from a CoreSettings object\r\n * @param {CoreSettings} settings the CoreSettings used as a basis for the WASM core configuration\r\n * @returns {WasmCoreSettings} the resulting WASM core configuration\r\n */\r\nexport function toWasmCoreSettings(settings: CoreSettings): WasmCoreSettings {\r\n  return new WasmCoreSettings(\r\n    settings.spatemMaxFreqMs,\r\n    settings.usesV2xRxWrapper,\r\n    settings.laneCorridorWidthM,\r\n    settings.featureLifetimeMs,\r\n    settings.camMaxFreqMs,\r\n    settings.approachHeadingTolerance,\r\n    settings.usingMatchedLanes,\r\n    false, // We do not have easy access to the system time in WASM\r\n    settings.userFriendlyGlosa,\r\n    settings.debugGlosa,\r\n    false, // We do not support Map GLOSA currently\r\n    settings.showObuPathHistory,\r\n    settings.showConsoleDebug,\r\n  );\r\n}","/**\r\n * @module GeojsonSource\r\n * @description The GeoJSON sources that are displayed on the application's map. Usually, each source handles the display of one particular V2X message type. \r\n */\r\n\r\n/**\r\n * @var GeojsonSource\r\n * @enum {number}\r\n * @description The currently implemented GeoJSON sources that will be displayed on the application's map.\r\n */\r\nexport enum GeojsonSource {\r\n  /** \r\n   * @member GREEN_LANES\r\n   * @description Displays the course of a lane leading up to a green traffic light as a green line on the map. \r\n   */\r\n  GREEN_LANES,\r\n  /** \r\n   * @member RED_LANES\r\n   * @description Displays the course of a lane leading up to a red traffic light as a red line on the map. \r\n   */\r\n  RED_LANES,\r\n  /** \r\n   * @member YELLOW_LANES\r\n   * @description Displays the course of a lane leading up to a yellow traffic light as a yellow line on the map. \r\n   */\r\n  YELLOW_LANES,\r\n  /** \r\n   * @member DARK_LANES\r\n   * @description Displays the course of a lane leading up to a traffic light with unknown signal information as a grey line on the map. \r\n   */\r\n  DARK_LANES,\r\n  /** \r\n   * @member INTERSECTION_REFPT\r\n   * @description Displays the position of the an intersections road-side unit as an icon on the map.\r\n   */\r\n  INTERSECTION_REFPT,\r\n  STATIC_LANES,\r\n  /** \r\n * @member DENM\r\n * @description Displays the position of a received DENM on-board unit or the application device as an icon on the map. Displays the trace of a DENM as a red line on the map.\r\n */\r\n  DENM,\r\n  /** \r\n   * @member CAM\r\n   * @description Displays the position of a received CAM on-board unit or the application device as an icon on the map. Displays the trace of a CAM as a line on the map.\r\n   */\r\n  CAM,\r\n  /** \r\n   * @member CPM\r\n   * @description Displays the outline or location of a detected object, displays the detection area of the sensor(s).\r\n   */\r\n  CPM,\r\n  /** \r\n  * @member GLOSA_DEBUG\r\n  * @description Displays the intersection area and the approach corridor the GLOSA algorithm has determined to be matching as polygons on the map.\r\n  */\r\n  GLOSA_DEBUG,\r\n  /** \r\n  * @member TL_CONTROL\r\n  * @description Displays the request-response cycles in SREM/SSEM communication between V2X stations as line graphs between the station locations.\r\n  */\r\n  TL_CONTROL,\r\n  /** \r\n  * @member MAP_GLOSA\r\n  * @description Displays GLOSA traffic light symbols directly on the map at the location of the approach stopline.\r\n  */\r\n  MAP_GLOSA,\r\n  /** \r\n * @member OBU_PATH\r\n * @description Displays the path history of the connected on-board unit or the application device as an icon on the map.\r\n */\r\n  OBU_PATH,\r\n  /** \r\n   * @member IVIM\r\n   * @description Displays the reference position of IVI messages as well as relevant lanes and zones on the map.\r\n   */\r\n  IVIM,\r\n  /** \r\n   * @member IOT_CLOUD_DATA\r\n   * @description Displays the location of StadtRad bike-sharing stations and EV chargers as received from the city of Hamburg's IoT Cloud as icons on the map.\r\n   */\r\n  IOT_CLOUD_DATA,\r\n  /** \r\n * @member OBU_POS\r\n * @description Displays the position of the connected on-board unit or the application device as an icon on the map.\r\n */\r\n  OBU_POS,\r\n}\r\n\r\n/**\r\n * @description Provides the source ID as defined in the style's JSON specification\r\n * @param {GeojsonSource} source\r\n * @returns {string} the ID of the given source\r\n */\r\nexport function id(source: GeojsonSource): string {\r\n  switch (source) {\r\n    case GeojsonSource.CAM:\r\n      return \"cam-src\"\r\n    case GeojsonSource.OBU_POS:\r\n      return \"obu-src\"\r\n    case GeojsonSource.OBU_PATH:\r\n      return \"obu-path-src\"\r\n    case GeojsonSource.DENM:\r\n      return \"denm-src\"\r\n    case GeojsonSource.GREEN_LANES:\r\n      return \"green-lane-src\"\r\n    case GeojsonSource.RED_LANES:\r\n      return \"red-lane-src\"\r\n    case GeojsonSource.YELLOW_LANES:\r\n      return \"yellow-lane-src\"\r\n    case GeojsonSource.INTERSECTION_REFPT:\r\n      return \"ref-point-src\"\r\n    case GeojsonSource.DARK_LANES:\r\n      return \"dark-lane-src\"\r\n    case GeojsonSource.CPM:\r\n      return \"cpm-src\"\r\n    case GeojsonSource.IOT_CLOUD_DATA:\r\n      return \"hh-iot-src\"\r\n    case GeojsonSource.TL_CONTROL:\r\n      return \"tl-control-src\"\r\n    case GeojsonSource.MAP_GLOSA:\r\n      return \"map-glosa-src\"\r\n    case GeojsonSource.IVIM:\r\n      return \"ivim-src\"\r\n    case GeojsonSource.GLOSA_DEBUG:\r\n      return \"misc-src\"\r\n  }\r\n  throw Error(\"Unreachable!\") // Unreachable as all enum cases are covered\r\n}","import { connect, MqttClient as MQTT } from \"mqtt/dist/mqtt\";\r\nimport { ObuInfo } from \"../types/CoreWorker\";\r\n\r\nexport interface IMqttClient {\r\n  onMessage: (topic: string, message: Buffer) => void;\r\n  onError?: (err: Error) => void;\r\n  disconnect: () => void;\r\n}\r\n\r\nexport enum V2xRxTopics {\r\n  SPATEM = \"v2x/rx/spatem\",\r\n  OBU_INFO = \"v2x/rx/obuinfo\",\r\n  MAPEM = \"v2x/rx/mapem\",\r\n  DENM = \"v2x/rx/denm\",\r\n  CAM = \"v2x/rx/cam\",\r\n  CPM = \"v2x/rx/cpm\",\r\n  IVIM = \"v2x/rx/ivim\",\r\n  SREM = \"v2x/rx/srem\",\r\n  SSEM = \"v2x/rx/ssem\",\r\n  SPATEM_REDUCED = \"v2x/rx-red/spatem\",\r\n  MAPEM_REDUCED = \"v2x/rx-red/mapem\",\r\n  DENM_REDUCED = \"v2x/rx-red/denm\",\r\n  CAM_REDUCED = \"v2x/rx-red/cam\",\r\n  CPM_REDUCED = \"v2x/rx-red/cpm\",\r\n  IVIM_REDUCED = \"v2x/rx-red/ivim\",\r\n  SREM_REDUCED = \"v2x/rx-red/srem\",\r\n  SSEM_REDUCED = \"v2x/rx-red/ssem\",\r\n  DENM_LOOPBACK = \"v2x/loopback/denm\",\r\n  CPM_LOOPBACK = \"v2x/loopback/cpm\",\r\n}\r\n\r\nexport class MqttClient implements IMqttClient {\r\n  private _brokerUri: string;\r\n  private _usesRxRed: boolean;\r\n  private _client: MQTT;\r\n  onObuInfo?: (obuInfo: ObuInfo) => void;\r\n  onError?: (err: Error) => void;\r\n  onMessage: (topic: string, message: Buffer) => void;\r\n\r\n  constructor(\r\n    brokerUri: string,\r\n    usesRxRed: boolean,\r\n    onMessage: (topic: string, message: Buffer) => void,\r\n    onConnect?: (err?: Error) => void,\r\n    onError?: (err: Error) => void\r\n  ) {\r\n    this._brokerUri = brokerUri;\r\n    this._usesRxRed = usesRxRed;\r\n    this.onError = onError;\r\n    this.onMessage = onMessage;\r\n    this._client = connect(this._brokerUri);\r\n    this._client.on(\"connect\", this._onConnect(onConnect));\r\n    this._client.on(\"message\", this.onMessage);\r\n    if (this.onError != null) this._client.on(\"error\", this.onError);\r\n  }\r\n\r\n  disconnect = () => {\r\n    this._client.end();\r\n  };\r\n\r\n\r\n  private _onConnect = (onConnect?: (err?: Error) => void) => () => {\r\n    onConnect?.call(this);\r\n    this._client.subscribe([\r\n      V2xRxTopics.OBU_INFO,\r\n      ...(this._usesRxRed ? [\r\n        V2xRxTopics.SPATEM_REDUCED,\r\n        V2xRxTopics.MAPEM_REDUCED,\r\n        V2xRxTopics.DENM_REDUCED,\r\n        V2xRxTopics.CAM_REDUCED,\r\n        V2xRxTopics.CPM_REDUCED,\r\n        V2xRxTopics.IVIM_REDUCED,\r\n        V2xRxTopics.SREM_REDUCED,\r\n        V2xRxTopics.SSEM_REDUCED\r\n      ] : [V2xRxTopics.SPATEM,\r\n      V2xRxTopics.MAPEM,\r\n      V2xRxTopics.DENM,\r\n      V2xRxTopics.CAM,\r\n      V2xRxTopics.CPM,\r\n      V2xRxTopics.IVIM,\r\n      V2xRxTopics.SSEM,\r\n      V2xRxTopics.SREM]),\r\n      V2xRxTopics.DENM_LOOPBACK,\r\n      V2xRxTopics.CPM_LOOPBACK,\r\n    ]);\r\n  };\r\n}\r\n","import {\r\n  CoreSettings,\r\n  TlSpat,\r\n  WorkerRequest,\r\n  WorkerRequestType,\r\n  WorkerResponseType,\r\n  toWasmCoreSettings,\r\n} from \"../types/CoreWorker\";\r\nimport { GeojsonSource } from \"../types/GeojsonSource\";\r\nimport { MqttClient } from \"./MqttClient\";\r\nimport init, { NativeCoreStatus, WasmCore } from \"@consider-it/v2x-wasm-core\";\r\n\r\nlet wasmIsInitialized = false\r\nlet nativeCore: WasmCore;\r\nlet mqttClient: MqttClient;\r\nlet settings: CoreSettings;\r\nlet pruneTask: number | NodeJS.Timer | undefined = undefined;\r\nlet glosaTask: number | NodeJS.Timer | undefined = undefined;\r\n\r\nconst mqttInit = () => {\r\n  mqttClient?.disconnect();\r\n  mqttClient = new MqttClient(\r\n    settings.brokerUrl,\r\n    settings.usesRateReducedTopics,\r\n    (topic: string, message: Buffer) => nativeCore?.push_mqtt_message(message, topic),\r\n    (err: Error | undefined) =>\r\n      postMessage({\r\n        type: WorkerResponseType.CONNECTED,\r\n        error: err,\r\n      }),\r\n    (err: Error) =>\r\n      postMessage({\r\n        type: WorkerResponseType.ERROR,\r\n        error: err,\r\n      })\r\n  );\r\n};\r\n\r\nconst initWasm = async () => {\r\n  // asynchronously load the WASM core library\r\n  if (!wasmIsInitialized) {\r\n    await init()\r\n    wasmIsInitialized = true\r\n  }\r\n  nativeCore = new WasmCore(\r\n    toWasmCoreSettings(settings),\r\n    (src: GeojsonSource, json: string) => postMessage({ type: WorkerResponseType.GEOJSON, src, json }),\r\n    (lon: number, lat: number, heading: number, kphSpeed: number) => {\r\n      postMessage({\r\n        type: WorkerResponseType.OBU_INFO, obuInfo: {\r\n          lat,\r\n          lon,\r\n          heading,\r\n          kphSpeed,\r\n          time: Date.now()\r\n        }\r\n      })\r\n    },\r\n    (status: NativeCoreStatus, extra: string) => {\r\n      if (\r\n        (\r\n          status === NativeCoreStatus.MqttDenmLoopbackMsg ||\r\n          status === NativeCoreStatus.MqttCpmLoopbackMsg\r\n        ) && extra.length > 0) {\r\n        postMessage({\r\n          type: WorkerResponseType.LOOPBACK,\r\n          src: status === NativeCoreStatus.MqttDenmLoopbackMsg ? GeojsonSource.DENM : GeojsonSource.CPM,\r\n          json: extra\r\n        })\r\n      }\r\n    },\r\n    (green: string, yellow: string, red: string, dark: string) => {\r\n      postMessage({\r\n        type: WorkerResponseType.MATCHED_LANE_PHASES,\r\n        greenLaneUuids: green,\r\n        yellowLaneUuids: yellow,\r\n        redLaneUuids: red,\r\n        darkLaneUuids: dark\r\n      })\r\n    }\r\n  )\r\n  clearInterval(pruneTask)\r\n  clearInterval(glosaTask)\r\n  pruneTask = setInterval(() => nativeCore?.prune(), settings.featureLifetimeMs);\r\n  glosaTask = setInterval(() => {\r\n    const spats = nativeCore?.glosa();\r\n    const tlSpatList: TlSpat[] = [];\r\n    for (let i = 0; i < spats.length; i = i + 4) {\r\n      const optRemaining = spats[i + 2];\r\n      const optAdvised = spats[i + 3];\r\n      tlSpatList.push({\r\n        phase: spats[i],\r\n        direction: spats[i + 1],\r\n        remainingSec: optRemaining <= 0 ? undefined : optRemaining,\r\n        advisedSpeedKph: optAdvised <= 0 ? undefined : optAdvised\r\n      });\r\n    }\r\n    postMessage({ type: WorkerResponseType.GLOSA, glosa: tlSpatList });\r\n  }, settings.glosaFrequencyMs);\r\n  mqttInit();\r\n}\r\nonmessage = (evt: MessageEvent<WorkerRequest>) => {\r\n  switch (evt.data?.type) {\r\n    case WorkerRequestType.INIT:\r\n      if (evt.data?.settings == null) {\r\n        postMessage({\r\n          type: WorkerResponseType.ERROR,\r\n          error: `Worker must be instantiated with a valid settings object. Found data: ${JSON.stringify(\r\n            evt.data\r\n          )}`,\r\n        });\r\n        return;\r\n      }\r\n      settings = evt.data.settings;\r\n      initWasm();\r\n      break;\r\n    case WorkerRequestType.UPDATE_SETTINGS:\r\n      if (evt.data?.settings == null) {\r\n        postMessage({\r\n          type: WorkerResponseType.ERROR,\r\n          error: `Worker must be instantiated with a valid settings object. Found data: ${JSON.stringify(\r\n            evt.data\r\n          )}`,\r\n        });\r\n        return;\r\n      }\r\n      settings = evt.data.settings;\r\n      initWasm()\r\n      break;\r\n    case WorkerRequestType.LATEST_MESSAGE:\r\n      if (\r\n        evt.data?.stationId == null ||\r\n        evt.data?.messageType == null\r\n      ) {\r\n        postMessage({\r\n          type: WorkerResponseType.ERROR,\r\n          error: `A valid station ID as well as a message type is needed. Found: ${JSON.stringify(\r\n            evt.data\r\n          )}`,\r\n        });\r\n        return;\r\n      }\r\n      const latest = nativeCore?.get_latest_message(evt.data.messageType!!, evt.data.stationId, evt.data.secondaryId)\r\n      postMessage({ type: WorkerResponseType.RAW_MSG, rawMsg: latest })\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [891], () => (__webpack_require__(5975)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"297bc106\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"/\";","__webpack_require__.b = self.location + \"/../../../\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t975: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkv2x_locator_web_app\"] = self[\"webpackChunkv2x_locator_web_app\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(891).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["WorkerRequestType","WorkerResponseType","GeojsonSource","V2xRxTopics","MqttClient","constructor","brokerUri","usesRxRed","onMessage","onConnect","onError","_brokerUri","_usesRxRed","_client","onObuInfo","disconnect","this","end","_onConnect","call","subscribe","OBU_INFO","SPATEM_REDUCED","MAPEM_REDUCED","DENM_REDUCED","CAM_REDUCED","CPM_REDUCED","IVIM_REDUCED","SREM_REDUCED","SSEM_REDUCED","SPATEM","MAPEM","DENM","CAM","CPM","IVIM","SSEM","SREM","DENM_LOOPBACK","CPM_LOOPBACK","connect","on","nativeCore","mqttClient","settings","pruneTask","glosaTask","wasmIsInitialized","initWasm","async","init","WasmCore","WasmCoreSettings","spatemMaxFreqMs","usesV2xRxWrapper","laneCorridorWidthM","featureLifetimeMs","camMaxFreqMs","approachHeadingTolerance","usingMatchedLanes","userFriendlyGlosa","debugGlosa","showObuPathHistory","showConsoleDebug","toWasmCoreSettings","src","json","postMessage","type","GEOJSON","lon","lat","heading","kphSpeed","obuInfo","time","Date","now","status","extra","NativeCoreStatus","MqttDenmLoopbackMsg","MqttCpmLoopbackMsg","length","LOOPBACK","green","yellow","red","dark","MATCHED_LANE_PHASES","greenLaneUuids","yellowLaneUuids","redLaneUuids","darkLaneUuids","clearInterval","setInterval","_nativeCore2","prune","_nativeCore3","spats","glosa","tlSpatList","i","optRemaining","optAdvised","push","phase","direction","remainingSec","undefined","advisedSpeedKph","GLOSA","glosaFrequencyMs","mqttInit","_mqttClient","brokerUrl","usesRateReducedTopics","topic","message","_nativeCore","push_mqtt_message","err","CONNECTED","error","ERROR","onmessage","evt","_evt$data","_evt$data2","_evt$data3","_evt$data4","_evt$data5","_nativeCore4","data","INIT","concat","JSON","stringify","UPDATE_SETTINGS","LATEST_MESSAGE","stationId","messageType","latest","get_latest_message","secondaryId","RAW_MSG","rawMsg","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","deferred","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","key","splice","r","d","definition","o","defineProperty","enumerable","get","f","e","chunkId","Promise","all","reduce","promises","u","miniCssF","g","globalThis","Function","window","obj","prop","prototype","hasOwnProperty","p","b","self","location","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop","next","then"],"sourceRoot":""}